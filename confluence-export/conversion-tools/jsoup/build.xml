<?xml version="1.0" encoding="ASCII"?>
<project>

  <property name="version"
            value="1.0"/>

  <property name="jar"
            value="build/parsers-${version}.jar"/>

  <path id="classpath">
    <pathelement location="${jar}"/>
    <pathelement location="lib/jsoup-1.8.2.jar"/>
  </path>

  <target name="clean">
    <delete dir="build"/>
  </target>

  <target name="jar">
    <mkdir dir="build/classes"/>
    <javac debug="yes"
           debuglevel="source,lines,vars"
           destdir="build/classes"
           includeantruntime="false">
      <compilerarg value="-Xlint:all"/>
      <classpath refid="classpath"/>
      <src path="src/"/>
    </javac>
    <jar destfile="${jar}">
      <fileset dir="build/classes"
               includes="**/*.class"/>
    </jar>
  </target>

  <property name="from.dir" location="${work.dir}/raw-export"/>
  <property name="to.flat.dir" location="${work.dir}/cleaned-flat-export"/>
  <property name="entities.xml.path" location="${work.dir}/raw-xml-export/entities.xml"/>
  <property name="page-tree.xml.path" location="${work.dir}/page-tree.xml"/>

  <target name="-dir-check">
    <fail unless="work.dir">use -Dwork.dir=/something to define working dir (ie: /something/raw-export, /something/cleaned-export, etc...</fail>
    <fail message="Raw export dir does not exist: ${from.dir}, did you specify wrong -Dwork.dir=... ?">
      <condition>
        <not>
          <available file="${from.dir}" />
        </not>
      </condition>
    </fail>
  </target>
  
  <target name="page-tree"
          depends="-dir-check">
    <fail message="Can't find entities.xml in work.dir! ... looking for: ${entities.xml.path}">
      <condition>
        <not>
          <available file="${entities.xml.path}" />
        </not>
      </condition>
    </fail>
    <xslt in="${entities.xml.path}" out="${page-tree.xml.path}"
          style="../page-hierarchy.xsl" />
  </target>
  
  <target name="scrape"
          depends="-dir-check,jar">
    <mkdir dir="${to.flat.dir}"/>
    <java classname="com.lucidworks.docparser.ScrapeConfluence"
          fork="true">
      <classpath refid="classpath"/>
      <arg value ="${from.dir}"/>
      <arg value ="${to.flat.dir}"/>
    </java>
  </target>

</project>
