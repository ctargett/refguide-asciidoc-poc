= Solr Ref Guide in Asciidoc
:toc:

== Why Change?

== Why Asciidoc(tor)

== Proof of Concept Ref Guide
This section describes the process for converting the Ref Guide and open issues for discussion.

=== Content Conversion Process
Confluence content converted with the following process:

* Export in HTML from Confluence
* Lucidworks conversion ant tasks found in `confluence-export/conversion-tools/jsoup/build.xml`:
** Clean up confluence styles (`ant scrape`)
** Add document hierarchy as links to each page (`ant map` then `ant hier`)
* Pandocs for html -> asciidoc conversion

=== Organization

How should we organize the Ref Guide?

* As chapters, with a folder for each main subject heading.
* As one big directory of files.

Other examples of projects using asciidoc for documentation.

=== Build Process

Asciidoctor is a toolchain in Ruby which facilitates converting text files to other formats for publishing. One project is the `asciidoctor-ant` plugin for Apache Ant.

==== HTML

Uses `asciidoctor-ant` plugin to convert to HTML. To generate HTML, simply run `ant html`.

This task sets the output format, defines a custom stylesheet (see Styles, below), and defines the plugin to use for code syntax highlighting, and other parameters.

===== HTML-related Rules in build.xml

The first part gets the required JAR file.

[source,xml]
----
<get src="http://repo1.maven.org/maven2/org/asciidoctor/asciidoctor-ant/1.5.1/asciidoctor-ant-1.5.1.jar"
  dest="lib/asciidoctor-ant.jar" usetimestamp="true"/>
----

The second part defines the rules for converting the documents to HTML.

[source,xml]
----
<target name="doc">
  <taskdef uri="antlib:org.asciidoctor.ant" resource="org/asciidoctor/ant/antlib.xml" classpath="lib/asciidoctor-ant.jar"/>
  <asciidoctor:convert
               sourceDirectory="asciidoc"
               outputDirectory="html"
               backend="html5"
               extensions="asc"
               sourceHighlighter="coderay"
               embedAssets="true"
               imagesDir="asciidoc/images">
    <attribute key="docinfo1" value='' />
    <attribute key="stylesheet" value="ref-guide.css" />
    <attribute key="stylesdir" value="html/styles" />
    <attribute key="icons" value="font" />
    <attribute key="figure-caption!" value='' />
    <attribute key="toc" value="right" />
 </asciidoctor:convert>
</target>
----

==== PDF

===== Current Behavior

Currently the `ant pdf` target calls a script `pdf/scripts/createPDF.sh` which relies on the `asciidoctor-pdf` gem to be installed on the local machine.

To install this gem locally, follow these steps:

. `gem install --pre asciidoctor-pdf`
. `gem install coderay`

The second step installs the plugin that provides code syntax highlighting (Pygments is better IMO, but is not supported by `asciidoctor-ant` at this time.)

See https://github.com/asciidoctor/asciidoctor-pdf for more details on using this plugin.

===== Issues
It seems `asciidoctor-ant` should be able to handle the PDF conversion, but it doesn't.

Another plugin `asciidoctor-pdf` allows conversion direct to PDF, although this is a gem? It also has other dependencies, I think. Can it be a jar, like `asciidoctor-ant`?

=== Styling

==== HTML
The `ant html` task applies a custom stylesheet found in `html/styles/ref-guide.css`. This is an adaptation of the default Asciidoc stylesheet.

Some items still to do:

* Update styles for Solr branding.

==== PDF

PDF styles are driven by themes. The current theme is found in `pdf/themes`. The command to generate the PDF must include the theme directory and theme name or it will fall back to the default theme.

The default theme has been modified to update the font colors. Some items still to do:

* Proper headers and footers
* Title page with appropriate ASF branding
* Light gray highlight on inline monospace

Instructions on how to modify the theme are found in the https://github.com/asciidoctor/asciidoctor-pdf/blob/master/docs/theming-guide.adoc[Asciidoctor PDF Theming Guide].
